#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  2048;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    add_header Access-Control-Allow-Origin  *;

    lua_shared_dict cassandra 1m; # shm storing cluster information
    lua_code_cache on;            # ensure the upvalue is preserved beyond a single request

    init_by_lua_block {
        local dvr = require "dvr"
        local dc_rr = require "resty.cassandra.policies.lb.dc_rr"
        local policy = dc_rr.new("sof1")
        local auth_provider = require "cassandra.auth"
        local auth = auth_provider.plain_text("nginx", "123456")

        dvr.init_cluster {
            shm = "cassandra",
            contact_points = {"127.0.0.1"},
            keyspace = "dvr",
            protocol_version = 4,
            auth = auth,            
            lb_policy = policy
        }
    }

    map $uri $basename {
        ~/(?<captured_basename>[^/]*)$ $captured_basename;
    }

    # url format of playlist: app/ tv channel name / bitrate / offset in seconds from now(UTC)
    map $uri $_app {
        ~/(?<app>[a-z0-9_\-]+)/(?<tv>[a-z0-9_\-]+)/(?<bitrate>[0-9]+)/(?<offset>[0-9]+)/[a-z0-9_\-]+\.(m3u8|ts)$ $app;
    }


    ### DVR Content layer

    server {
        listen       127.0.0.1:83;
        server_name  _;

        location / {

            root   /tmp/wwwroot;

        }

        location ~ /([a-z0-9_\-]+\.m3u8)$ {

            # populate needed variables
            set $req $_app;

            expires 1s;
            add_header Cache-Control public;

            content_by_lua_block {


                function round(num, numDecimalPlaces)
                    local mult = 10^(numDecimalPlaces or 0)
                    if num >= 0 then return math.floor(num * mult + 0.5) / mult
                    else return math.ceil(num * mult - 0.5) / mult end
                end

                function explode(div,str) -- credit: http://richard.warburton.it
          	    if (div=='') then return false end
          	    local pos,arr = 0,{}
                    -- for each divider found
                    for st,sp in function() return string.find(str,div,pos,true) end do
                        table.insert(arr,string.sub(str,pos,st-1)) -- Attach chars left of current divider
                        pos = sp + 1 -- Jump past current divider
                    end
                    table.insert(arr,string.sub(str,pos)) -- Attach chars right of last divider
                    return arr
                end

                local dvr = require "dvr"
                local cassandra = require "cassandra"

                local app = ngx.var.app
                local tv = ngx.var.tv
                local bitrate = tonumber(ngx.var.bitrate)
                local offset = tonumber(ngx.var.offset)

                if bitrate == nil or offset == nil then
                    ngx.log(ngx.ERR, 'LOG: bitrate or offset are null. ', err)
                    return ngx.exit(400)
                end

                local table_chunk_info = app .. '_' .. tv .. '_' .. bitrate .. '_chunk_info'
                local table_variant_info = app .. '_variant_info'

                -- end of line string
                local eol = '\n'
                local qry = nil
                local playlist_type = ''
                local variant = ''
                local extm3u = '#EXTM3U'
                local m3uversion = '#EXT-X-VERSION:3'
                local m3ucache = '#EXT-X-ALLOW-CACHE:NO'

                local chunks_in_playlist = 3
                local date = os.time()
                date_offset = date - offset

                -- determine playlist type: VARIANT or LIVE
                if bitrate == 0 then
                    playlist_type = 'variant'
                    qry = 'SELECT bitrate, codecs, resolution  FROM ' .. table_variant_info .. ' WHERE app=\'' .. app .. '\' AND tv=\'' .. tv .. '\' ALLOW FILTERING'
                else
                    playlist_type = 'live'
                    qry = 'SELECT fake, chunk_duration, chunk_name FROM ' .. table_chunk_info .. ' WHERE time_id>maxTimeuuid(\'' .. os.date("%Y-%m-%d %X", date_offset) .. '\') LIMIT ' .. chunks_in_playlist .. ' ALLOW FILTERING'
                end

                local rows, err = dvr.execute(qry,nil,{consistency=cassandra.consistencies.local_one})

                if not rows then
                   ngx.log(ngx.ERR, 'LOG: could not retrieve playlist: ', err)
                   return ngx.exit(400)
                end


                if playlist_type == 'variant' then

                     variant = extm3u .. eol .. m3uversion

                     for i, row in ipairs(rows) do
                        variant = variant .. eol .. '#EXT-X-STREAM-INF:BANDWIDTH=' .. rows[i].bitrate .. ',CODECS=' .. rows[i].codecs .. ',RESOLUTION=' .. rows[i].resolution .. eol .. '/' .. app .. '/' .. tv .. '/' .. rows[i].bitrate .. '/' .. offset .. '/chunklist.m3u8'
                    end

                    ngx.say(variant)

                else

                    -- generate live playlist
                    local playlist_live_tmp1 = ''
                    local playlist_live_tmp2 = ''
                    local first_cunk = 'true'
                    local first_chunk_num = 0
                    local targetduration = 0
                    local first_chunk_num_tmp1 = {}
                    local first_chunk_num_tmp2 = {}

                    for i, row in ipairs(rows) do
                        if first_cunk == 'true' then
                            first_chunk_num_tmp1 = explode('_', rows[i].chunk_name)
                            -- explode last element of previous table
                            first_chunk_num_tmp2 = explode('.ts', first_chunk_num_tmp1[table.getn(first_chunk_num_tmp1)])
                            first_chunk_num = first_chunk_num_tmp2[1]
                            targetduration=math.ceil(rows[i].chunk_duration)
                            first_cunk = 'false'
                        end 

                        playlist_live_tmp1 = playlist_live_tmp1 .. eol .. '#EXTINF:' .. round(rows[i].chunk_duration,2) .. ',' .. eol .. rows[i].chunk_name

                    end

                    playlist_live_tmp2 = extm3u .. eol .. m3uversion .. eol .. m3ucache .. eol .. '#EXT-X-TARGETDURATION:' .. targetduration .. eol .. '#EXT-X-MEDIA-SEQUENCE:' .. first_chunk_num .. eol .. '#EXT-X-KEY:METHOD=AES-128,URI="http://127.0.0.1/aes.key?h={encKeySessionid}"'

                    playlist_live = playlist_live_tmp2 .. playlist_live_tmp1

                    ngx.say(playlist_live)
                end

            }
        }


        location ~ /([a-z0-9_\-]+\.ts)$ {

            # populate needed variables
            set $req $_app;
            set $ts_file $basename;

            expires 12h;
            add_header Cache-Control public;

            content_by_lua_block {

                local dvr = require "dvr"
                local cassandra = require "cassandra"

                local table_chunk_content = ngx.var.app .. '_' .. ngx.var.tv .. '_' .. ngx.var.bitrate .. '_chunk_content'
                local offset = tonumber(ngx.var.offset)

                local qry = 'SELECT chunk_content FROM ' .. table_chunk_content .. ' WHERE chunk_name=\''.. ngx.var.ts_file ..'\'' 

                local rows, err = dvr.execute(qry,nil,{consistency=cassandra.consistencies.local_one})

                if not rows then
                    ngx.log(ngx.ERR, 'could not retrieve chunk: ', err)
                    return ngx.exit(400)
                end

                ngx.print(rows[1].chunk_content)
            }
        }
    }

    ### LIVE Content layer

    server {
        listen       127.0.0.1:82;
        server_name  _;

        access_log  logs/host.access.log  combined;

        location / {

            root   /tmp/wwwroot/live;

        }

        location ~ /([a-z0-9_\-]+\.m3u8)$ {

            root   /tmp/wwwroot/live;

            # populate needed variables
            set $req $_app;

            expires 1s;
            add_header Cache-Control public;
        }

        location ~ /([a-z0-9_\-]+\.ts)$ {

            root   /tmp/wwwroot/live;

            # populate needed variables
            set $req $_app;
            set $ts_file $basename;

            expires 1m;
            add_header Cache-Control public;
        }

    }

    ### Caching layer
    
    proxy_cache_path /tmp/ngx_cache/ngx_dvr_cache levels=1:2 keys_zone=dvr_cache:256m max_size=360g inactive=12h use_temp_path=off;
    proxy_cache_path /tmp/ngx_cache/ngx_live_cache levels=1:2 keys_zone=live_cache:1m max_size=500m inactive=1m use_temp_path=off;
    proxy_cache_lock on;
    proxy_cache_use_stale  updating;

    server {
        listen       127.0.0.1:81;
        server_name  _;

        client_max_body_size 5m;
        add_header X-Cache-Status $upstream_cache_status;


        location / {

            root   /tmp/wwwroot;

        }

        location ~ /([a-z0-9_\-]+\.m3u8)$ {

            # populate needed variables
            set $req $_app;

            error_page 418 = @live_playlist;
            recursive_error_pages on;

            if ($offset = "0") {
                return 418;
            }

            proxy_pass http://127.0.0.1:83;
            proxy_cache dvr_cache;
            proxy_cache_key $uri;

        }

        location @live_playlist {
            proxy_pass http://127.0.0.1:82;
            proxy_cache live_cache;
            proxy_cache_key $uri;
        }

        location ~ /([a-z0-9_\-]+\.ts)$ {
            
            # populate needed variables
            set $req $_app;
            set $ts_file $basename;

            error_page 418 = @live_chunk;
            recursive_error_pages on;

            if ($offset = "0") {
                return 418;
            }

            proxy_pass http://127.0.0.1:83;
            proxy_cache dvr_cache;
            proxy_cache_key $app$tv$bitrate$ts_file;
        }

        location @live_chunk {
            proxy_pass http://127.0.0.1:82;
            proxy_cache live_cache;
            proxy_cache_key $app$tv$bitrate$ts_file;
        }

    }

    ### Authorization layer

    server {
        listen       80;
        server_name  _;

        location / {

            root   /tmp/wwwroot;

        }

        location ~ /([a-z0-9_\-]+\.m3u8)$ {

            access_by_lua_file /usr/local/openresty/nginx/conf/access.lua;
            
            proxy_pass http://127.0.0.1:81;

            header_filter_by_lua_block { ngx.header.content_length = nil }
            body_filter_by_lua_block {
            if ngx.var.arg_h then
                ngx.arg[1] = ngx.re.sub(ngx.arg[1],"{encKeySessionid}", ngx.var.arg_h)
                ngx.arg[1] = ngx.re.gsub(ngx.arg[1],"\\.m3u8", ".m3u8?h=" .. ngx.var.arg_h)
                ngx.arg[1] = ngx.re.gsub(ngx.arg[1],"\\.ts", ".ts?h=" .. ngx.var.arg_h)
                ngx.header.content_length = string.len(ngx.arg[1]) .. "\\n"
            end
            }
        }

        location ~ /([a-z0-9_\-]+\.ts)$ {

            access_by_lua_file /usr/local/openresty/nginx/conf/access.lua;
            
            proxy_pass http://127.0.0.1:81;
            
        }

        location /status {
            stub_status on;
            access_log   off;
            allow 127.0.0.1;
            deny all;
        }
    }

    ### Serving other stuff...

    server {
        listen       84;
        server_name  _;

        location / {

            root   /tmp/wwwroot/remux;

        }
    }
}
